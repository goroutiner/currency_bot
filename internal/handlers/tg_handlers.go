package handlers

import (
	"currency_bot/internal/currency"
	"currency_bot/internal/entities"
	"currency_bot/internal/plotter"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	tele "gopkg.in/telebot.v4"
)

// SendStart –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
func SendStart(c tele.Context) error {
	entities.ModeSelector.Inline(entities.ModeSelector.Row(entities.ExchangeBtn, entities.PlotterBtn))
	return c.Send("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º ‚ñ∂Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–µ–∂–∏–º:", entities.ModeSelector)
}

// ChangeCurrency –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
func ChangeCurrency(c tele.Context) error {
	entities.RatesSelector.Inline(entities.RatesSelector.Split(2, entities.BtnsRates)...)
	return c.Send("–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", entities.RatesSelector)
}

// ChangeMode –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
func ChangeMode(c tele.Context) error {
	entities.ModeSelector.Inline(entities.ModeSelector.Row(entities.ExchangeBtn, entities.PlotterBtn))
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–µ–∂–∏–º:", entities.ModeSelector)
}

// SendCurrencies –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
func SendCurrencies(c tele.Context) error {
	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
	entities.CurrencyMode = c.Callback().Unique

	return ChangeCurrency(c)
}

// CheckingSelect –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–¥–µ–ª–∞–Ω –ª–∏ —Ä–∞–Ω–µ–µ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏ –≤–∞–ª—é—Ç—ã
func CheckingSelect(c tele.Context) bool {
	ok := true

	if entities.CurrencyMode == "" {
		ChangeMode(c)
		ok = false
	} else if entities.–°urrencyCode == "" {
		ChangeCurrency(c)
		ok = false
	}

	return ok
}

// SendAsk –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π –∫—É—Ä—Å–∞ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
// –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–≤–µ –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
func SendAsk(c tele.Context) error {
	// —Å–æ—Ö—Ä–∞–Ω–µ—è–µ–º –∫–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
	entities.–°urrencyCode = strings.TrimPrefix(c.Data(), "\f")

	switch entities.CurrencyMode {
	case entities.ExchangeBtn.Text:
		entities.StatusesSelector.Inline(entities.StatusesSelector.Row(entities.LatestBtn, entities.HistorBtn))
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –∫—É—Ä—Å–∞ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏:", entities.StatusesSelector)
	case entities.PlotterBtn.Text:
		return c.Send("–í–≤–µ–¥–∏—Ç–µ 2 —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã, –∏–º–µ—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫ –º–µ–∂–¥—É —Å–æ–±–æ–π –Ω–µ –º–µ–Ω–µ–µ 9 –¥–Ω–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å 1999 –≥–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
	default:
		return ChangeMode(c)
	}
}

// SendLatestRate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
func SendLatestRate(currency *currency.Service) tele.HandlerFunc {
	return func(c tele.Context) error {
		if ok := CheckingSelect(c); !ok {
			return nil
		}

		status := entities.LatestBtn.Text
		rateCode := entities.–°urrencyCode

		res, err := currency.GetRate(status, rateCode, "")
		if err != nil {
			log.Println(err.Error())
			return nil
		}

		return c.Send(fmt.Sprintf("‚úÖ %s", res))
	}
}

// SendAskDate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–æ—Ç –≤–≤–µ–ª –¥–∞—Ç—É
func SendAskDate(c tele.Context) error {
	if ok := CheckingSelect(c); !ok {
		return nil
	}

	return c.Send("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å 1999 –≥–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
}

// SendHistoricalRate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å
func SendHistoricalRate(c tele.Context, currency *currency.Service) error {
	if ok := CheckingSelect(c); !ok {
		return nil
	}

	date := c.Text()
	status := entities.HistorBtn.Text
	rateCode := entities.–°urrencyCode

	res, err := currency.GetRate(status, rateCode, date)
	if err != nil {
		log.Println(err.Error())
		return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞‚ùó –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
	}

	return c.Send(fmt.Sprintf("‚úÖ %s", res))
}

// SendPlot –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –æ—Ç—Ä–µ–∑–∫–µ –≤—Ä–µ–º–µ–Ω–∏
func SendPlot(c tele.Context, currency *currency.Service) error {
	if ok := CheckingSelect(c); !ok {
		return nil
	}

	warning := "–î–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫ –º–µ–∂–¥—É –Ω–∏–º–∏ –º–µ–Ω–µ–µ 9 –¥–Ω–µ–π‚ùó\n–í–≤–µ–¥–∏—Ç–µ 2 —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã, –∏–º–µ—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫ –º–µ–∂–¥—É —Å–æ–±–æ–π –Ω–µ –º–µ–Ω–µ–µ 9 –¥–Ω–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å 1999 –≥–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:"

	twoDate := strings.Split(c.Text(), " ")
	if len(twoDate) != 2 {
		return c.Send(warning)
	}

	if entities.Delay != nil {
		// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–≤—à–µ–º—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞
		func(c tele.Context) error {
			if time.Until(entities.RestartTime).Seconds() <= 0 {
				return nil
			}

			notify := fmt.Sprintf("–î–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å %.0f —Å–µ–∫—É–Ω–¥(—ã)... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ üòÅ", time.Until(entities.RestartTime).Seconds())
			return c.Send(notify)
		}(c)

		// –æ–∂–∏–¥–∞–µ–º –ø–æ–∫–∞ –∏—Å—Ç–µ—á–µ—Ç 1 min
		<-entities.Delay.C
	}

	data, err := currency.GetPlotData(entities.–°urrencyCode, twoDate[0], twoDate[1])
	if err != nil {
		log.Println(err.Error())
		return c.Send(warning)
	}

	plotFile, err := plotter.GetPlot(data)
	if err != nil {
		log.Println(err.Error())
		return nil
	}
	defer os.Remove(plotFile)

	entities.Delay = time.NewTimer(time.Minute)
	entities.RestartTime = time.Now().Add(time.Minute)

	return c.Send(&tele.Photo{File: tele.FromDisk(plotFile)})
}

// SendResult –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
func SendResult(currency *currency.Service) tele.HandlerFunc {
	return func(c tele.Context) error {
		switch entities.CurrencyMode {
		case entities.ExchangeBtn.Text:
			return SendHistoricalRate(c, currency)
		case entities.PlotterBtn.Text:
			return SendPlot(c, currency)
		default:
			return ChangeMode(c)
		}
	}
}
